/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
    ext {
        beamVersion = '2.37.0'
        visionApiVersion = '2.0.21'
        videoApiVersion = '2.0.18'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        dependencies {
            classpath "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:3.2.0"
            classpath "com.diffplug.spotless:spotless-plugin-gradle:6.3.0"
        }
    }
}

group 'com.google.solutions'
version '0.1.0'

repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'com.google.cloud.tools.jib'
apply plugin: 'com.diffplug.spotless'
// Licence header enforced by spotless
def javaLicenseHeader = """/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"""
java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

mainClassName = System.getProperty('mainClass', 'com.google.solutions.annotation.AnnotationPipeline')

jib {
    from {
        image = 'gcr.io/dataflow-templates-base/java11-template-launcher-base:20220124_RC00'
    }
    to {
        credHelper = 'gcloud'
    }
    container {
        appRoot = '/template/df-vision-api-template'
        entrypoint = 'INHERIT'
        environment = [DATAFLOW_JAVA_COMMAND_SPEC: '/template/df-vision-api-template/resources/java_command_spec.json']
    }
}
group 'com.google.solution'
version '0.1.0'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}
dependencies {
    implementation group: 'org.apache.beam', name: 'beam-sdks-java-core', version: beamVersion
    implementation(group: 'org.apache.beam', name: 'beam-runners-google-cloud-dataflow-java', version: beamVersion) {
        exclude group: 'io.confluent', module: 'kafka-schema-registry-client'
        exclude group: 'io.confluent', module: 'kafka-avro-serializer'
    }
    implementation group: 'org.apache.beam', name: 'beam-runners-direct-java', version: beamVersion
    implementation group: 'org.apache.beam', name: 'beam-sdks-java-extensions-ml', version: beamVersion
    implementation group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.36'
    implementation "com.google.auto.value:auto-value-annotations:1.9"
    annotationProcessor "com.google.auto.value:auto-value:1.9"
    implementation 'com.google.http-client:google-http-client:1.41.4'
    implementation group: 'com.google.cloud', name: 'google-cloud-vision', version: visionApiVersion
    implementation group: 'com.google.cloud', name: 'google-cloud-video-intelligence', version: videoApiVersion
    testImplementation group: 'org.apache.beam', name: 'beam-runners-direct-java', version: beamVersion
    testImplementation group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.36'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-core', version: '2.2'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: '2.2'
    testImplementation 'junit:junit:4.13.2'
}

jar {
    manifest {
        attributes('Main-Class': mainClassName)
    }
}

compileJava {
    // Add additional jvm argument
    options.compilerArgs.addAll(['-Xlint:all', '-Xlint:-processing'])
}

// default tasks when you run ./gradlew
defaultTasks 'clean', 'assemble'
// Google cloud dataflow requires the resource/main directory to exist
task resources {
    def resourcesDir = new File('build/resources/main')
    resourcesDir.mkdirs()
}

run {
    if (project.hasProperty('args')) {
        args project.args.split('\\s')
    }
}

task execPipeline(type: JavaExec) {
    dependsOn(assemble)
    mainClass = System.getProperty("mainClass")
    classpath = sourceSets.main.runtimeClasspath
    systemProperties System.getProperties()
    def execArgs = System.getProperty("exec.args")
    args execArgs == null ? "" : execArgs.split()
}

// Spotless configuration

def enableSpotlessCheck = project.hasProperty('enableSpotlessCheck') && project.enableSpotlessCheck == 'true'
spotless {
    enforceCheck enableSpotlessCheck
    java {
        licenseHeader javaLicenseHeader
        googleJavaFormat()
    }
}

run.mustRunAfter 'resources'

// Tests

test {
    useJUnit()
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
        exceptionFormat "full"
    }
}

sourceSets {
    test {
        java.srcDir file('src/test')
    }
}